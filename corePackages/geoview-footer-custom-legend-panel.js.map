{"version":3,"file":"corePackages/geoview-footer-custom-legend-panel.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../geoview-legend-panel/src/custom-legend-style.ts","webpack://geoview-core/../geoview-legend-panel/src/custom-legend-panel.tsx","webpack://geoview-core/../geoview-legend-panel/src/index-footer.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { logger } from '@/core/utils/logger';\n\n/** ******************************************************************************************************************************\n * Footer Plugin abstract class.\n */\nexport abstract class FooterPlugin extends AbstractPlugin {\n  // Store index of tab\n  value?: number;\n\n  // Store the footer props\n  footerProps?: TypeTabs;\n\n  /**\n   * Overridable function to create footer props content\n   * @returns TypeTabs The footer props content\n   */\n  onCreateContentProps(): TypeTabs {\n    // Override this to create the footer props..\n\n    // Return dummy content\n    return {\n      id: 'some-id',\n      value: this.value!,\n      label: 'Some label',\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\n    };\n  }\n\n  /**\n   * Called when a footer plugin is being added\n   */\n  onAdd(): void {\n    // Log\n    // No need to log, parent class does it well already via added() function.\n\n    // Set value to length of tabs(?)\n    this.value = this.mapViewer().footerBarApi.tabs.length;\n\n    // Create props\n    this.footerProps = this.onCreateContentProps();\n\n    // Create tab with the props\n    this.mapViewer().footerBarApi.createTab(this.footerProps);\n  }\n\n  /**\n   * Called when a footer plugin is being removed\n   */\n  onRemove(): void {\n    // Log\n    // No need to log, parent class does it well already via removed() function.\n\n    // Remove the footer tab\n    if (this.value) this.mapViewer().footerBarApi.removeTab(this.footerProps!.id);\n  }\n\n  /**\n   * Called when a footer plugin has been selected in the tabs\n   */\n  // Added eslint-disable here, because we do want to override this method in children and keep 'this'.\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  onSelected(): void {\n    // Log\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\n\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\n\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\n  }\n}\n","/* @ts-expect-error there is no mui style in this package */\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme): any => ({\n  legendCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '2px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      width: '300px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n      '&:hover': {\n        border: `2px solid #FFFF00`,\n      },\n      '&.active': {\n        border: `2px solid #FFFFFF`,\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.geoViewColor.grey.dark[900]} !important`,\n      color: theme.palette.geoViewColor.grey.light[900],\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .legendCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        overflow: 'hidden',\n        border: '1px solid theme.palette.geoViewColor.ccc',\n        display: 'flex',\n        align: 'center',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .legendCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.85),\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.palette.geoViewColor.primary.main,\n      '& .MuiCardContent-root': {\n        '& .legendCardThumbnailOverlay': {\n          backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.55),\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.palette.geoViewColor.primary.light[200],\n      '& .MuiCardContent-root': {\n        '& .legendCardThumbnailOverlay': {\n          backgroundColor: 'transparent',\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .legendCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { Extent } from 'geoview-core/src/api/config/types/map-schema-types';\nimport { getSxClasses } from './custom-legend-style';\n\ninterface LegendPanelProps {\n  mapId: string;\n  config: TypeLegendProps;\n}\n\ninterface TypeLegendItem {\n  legendTitle: string;\n  imageUrl: string;\n  extent: Extent;\n}\n\ntype LegendListItems = TypeLegendItem[];\n\ntype TypeLegendProps = {\n  isOpen: boolean;\n  legendList: LegendListItems;\n  version?: string;\n};\n\nexport function LegendPanel(props: LegendPanelProps): JSX.Element {\n  const { mapId, config } = props;\n  const legendList = config.legendList as LegendListItems;\n\n  const { cgpv } = window;\n  const { api, ui } = cgpv;\n\n  const myMap = api.maps[mapId];\n  const { Card, Box } = ui.elements;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  return (\n    <Box sx={sxClasses.legendCard}>\n      {legendList.map((legendItem: TypeLegendItem, index) => {\n        return (\n          <Card\n            tabIndex={0}\n            className=\"legendCardThumbnail\"\n            onClick={() => myMap.zoomToLngLatExtentOrCoordinate(legendItem.extent, { maxZoom: 14 })}\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            title={legendItem.legendTitle}\n            contentCard={\n              // eslint-disable-next-line react/jsx-no-useless-fragment\n              <>\n                {typeof legendItem.imageUrl === 'string' && (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <Box component=\"img\" key={index} src={legendItem.imageUrl} alt=\"\" className=\"legendCardThumbnail\" />\n                )}\n              </>\n            }\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","import { Cast, AnySchemaObject, TypeJsonObject, toJsonObject } from 'geoview-core/src/core/types/global-types';\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\nimport { CustomLegendIcon } from 'geoview-core/src/ui/icons';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-legend-panel.json';\nimport { LegendPanel } from './custom-legend-panel';\n\n/**\n * The Chart Plugin which will be automatically instanciated during GeoView's initialization.\n */\nclass CustomLegendFooterPlugin extends FooterPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  // The callback used to redraw the GeoCharts in the GeoChartPanel\n  callbackRedraw?: () => void;\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      footerCustomLegendPanel: {\n        title: 'Custom Legend',\n      },\n    },\n    fr: {\n      footerCustomLegendPanel: {\n        title: 'Légende Personalisée',\n      },\n    },\n  });\n\n  /**\n   * Overrides the addition of the GeoChart Footer Plugin to make sure to set the chart configs into the store.\n   */\n  override onAdd(): void {\n    // Initialize the store with geochart provided configuration\n    // GeochartEventProcessor.setGeochartCharts(this.pluginProps.mapId, this.configObj.charts);\n\n    // Call parent\n    super.onAdd();\n  }\n\n  /**\n   * Overrides the creation of the content properties of this GeoChart Footer Plugin.\n   * @returns {TypeTabs} The TypeTabs for the GeoChart Footer Plugin\n   */\n  override onCreateContentProps(): TypeTabs {\n    // Create element\n    const content = <LegendPanel mapId={this.pluginProps.mapId} config={{ isOpen: true, legendList: [] }} />;\n\n    return {\n      id: 'footer-custom-legend-panel',\n      value: this.value!,\n      label: 'footerCustomLegendPanel.title',\n      icon: <CustomLegendIcon />,\n      content,\n    };\n  }\n\n  /**\n   * Handles when a redraw callback has been provided by LegendPanel\n   */\n  handleProvideCallbackRedraw(callbackRedraw: () => void): void {\n    // Keep it\n    this.callbackRedraw = callbackRedraw;\n  }\n}\n\n// Exports the CustomLegendFooterPlugin\nexport default CustomLegendFooterPlugin;\n\n// Keep a reference to the CustomLegendPlugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['footer-custom-legend-panel'] = Cast<CustomLegendFooterPlugin>(CustomLegendFooterPlugin);\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","mapViewer","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","removeTab","logger","logTraceCore","AbstractPlugin","getSxClasses","theme","legendCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","width","transition","geoViewColor","dark","fontSize","fontWeight","margin","padding","height","order","position","overflow","align","objectFit","top","left","lighten","cursor","borderColor","main","LegendPanel","props","legendList","config","cgpv","window","api","ui","myMap","maps","_ui$elements","elements","Card","Box","useTheme","sxClasses","_jsx","sx","children","map","legendItem","index","tabIndex","className","onClick","zoomToLngLatExtentOrCoordinate","extent","maxZoom","title","legendTitle","contentCard","_Fragment","imageUrl","component","src","alt","CustomLegendFooterPlugin","_FooterPlugin","toJsonObject","en","footerCustomLegendPanel","fr","schema","defaultConfig","isOpen","icon","CustomLegendIcon","callbackRedraw","geoviewPlugins","Cast"],"sourceRoot":""}