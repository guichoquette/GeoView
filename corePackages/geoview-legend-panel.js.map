{"version":3,"file":"corePackages/geoview-legend-panel.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/appbar-plugin.ts","webpack://geoview-core/../geoview-legend-panel/src/custom-legend-panel.tsx","webpack://geoview-core/../geoview-legend-panel/src/custom-legend-style.ts","webpack://geoview-core/../geoview-legend-panel/src/index.tsx"],"sourcesContent":["import { TypeButtonPanel, TypePanelProps } from '@/ui/panel/panel-types';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { TypeWindow } from '@/core/types/global-types';\nimport { TypeIconButtonProps } from '@/ui/icon-button/icon-button-types';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create content\n    this.panelProps.content = this.onCreateContent();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.mapViewer().appBarApi.createAppbarPanel(this.buttonProps!, this.panelProps, this.buttonProps.id) || undefined;\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.mapViewer().appBarApi.removeAppbarPanel(this.buttonPanel.buttonPanelId, this.buttonProps!.id!);\n    }\n  }\n}\n","import { Extent } from 'geoview-core/src/api/config/types/map-schema-types';\nimport { getSxClasses } from './custom-legend-style';\n\ninterface LegendPanelProps {\n  mapId: string;\n  config: TypeLegendProps;\n}\n\ninterface TypeLegendItem {\n  legendTitle: string;\n  imageUrl: string;\n  extent: Extent;\n}\n\ntype LegendListItems = TypeLegendItem[];\n\ntype TypeLegendProps = {\n  isOpen: boolean;\n  legendList: LegendListItems;\n  version: string;\n};\n\nexport function LegendPanel(props: LegendPanelProps): JSX.Element {\n  const { mapId, config } = props;\n  const legendList = config.legendList as LegendListItems;\n\n  const { cgpv } = window;\n  const { api, ui } = cgpv;\n\n  const myMap = api.maps[mapId];\n  const { Card, Box } = ui.elements;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  return (\n    <Box sx={sxClasses.legendCard}>\n      {legendList.map((legendItem: TypeLegendItem, index) => {\n        return (\n          <Card\n            tabIndex={0}\n            className=\"legendCardThumbnail\"\n            onClick={() => myMap.zoomToLngLatExtentOrCoordinate(legendItem.extent, { maxZoom: 14 })}\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            title={legendItem.legendTitle}\n            contentCard={\n              // eslint-disable-next-line react/jsx-no-useless-fragment\n              <>\n                {typeof legendItem.imageUrl === 'string' && (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <Box component=\"img\" key={index} src={legendItem.imageUrl} alt=\"\" className=\"legendCardThumbnail\" />\n                )}\n              </>\n            }\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","/* @ts-expect-error there is no mui style in this package */\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme): any => ({\n  legendCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '2px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      width: '300px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n      '&:hover': {\n        border: `2px solid #FFFF00`,\n      },\n      '&.active': {\n        border: `2px solid #FFFFFF`,\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.geoViewColor.grey.dark[900]} !important`,\n      color: theme.palette.geoViewColor.grey.light[900],\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .legendCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        overflow: 'hidden',\n        border: '1px solid theme.palette.geoViewColor.ccc',\n        display: 'flex',\n        align: 'center',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .legendCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.85),\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.palette.geoViewColor.primary.main,\n      '& .MuiCardContent-root': {\n        '& .legendCardThumbnailOverlay': {\n          backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.55),\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.palette.geoViewColor.primary.light[200],\n      '& .MuiCardContent-root': {\n        '& .legendCardThumbnailOverlay': {\n          backgroundColor: 'transparent',\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .legendCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { TypeJsonObject, toJsonObject, AnySchemaObject, Cast } from 'geoview-core/';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { CustomLegendIcon } from 'geoview-core/src/ui/icons';\nimport { TypeIconButtonProps } from 'geoview-core/src/ui/icon-button/icon-button-types';\nimport { TypePanelProps } from 'geoview-core/src/ui/panel/panel-types';\nimport { LegendPanel } from './custom-legend-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-legend-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass LegendPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      LegendPanel: {\n        title: 'Legend',\n      },\n    },\n    fr: {\n      LegendPanel: {\n        title: 'Légende',\n      },\n    },\n  });\n\n  override onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: `legend-panel`,\n      tooltip: 'LegendPanel.title',\n      tooltipPlacement: 'right',\n      children: <CustomLegendIcon />,\n      visible: true,\n    };\n  }\n\n  override onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'LegendPanel.title',\n      icon: <CustomLegendIcon />,\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  override onCreateContent = (): JSX.Element => {\n    return <LegendPanel mapId={this.pluginProps.mapId} config={this.configObj || {}} />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  override onRemoved(): void {}\n}\n\nexport default LegendPanelPlugin;\n\n// Keep a reference to the Legend Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['legend-panel'] = Cast<LegendPanelPlugin>(LegendPanelPlugin);\n"],"names":["AppBarPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","MapIcon","window","cgpv","ui","elements","id","tooltip","tooltipPlacement","children","this","react","createElement","visible","_this$configObj","title","icon","width","status","configObj","isOpen","undefined","pluginProps","mapId","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","content","onCreateContent","buttonPanel","mapViewer","appBarApi","createAppbarPanel","api","removeAppbarPanel","buttonPanelId","AbstractPlugin","LegendPanel","props","legendList","config","myMap","maps","_ui$elements","Card","Box","sxClasses","theme","legendCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","transition","geoViewColor","dark","fontSize","fontWeight","margin","padding","height","order","position","overflow","align","objectFit","top","left","lighten","cursor","borderColor","main","getSxClasses","useTheme","_jsx","sx","map","legendItem","index","tabIndex","className","onClick","zoomToLngLatExtentOrCoordinate","extent","maxZoom","legendTitle","contentCard","_Fragment","imageUrl","component","src","alt","LegendPanelPlugin","_AppBarPlugin","toJsonObject","en","fr","schema","defaultConfig","CustomLegendIcon","geoviewPlugins","Cast"],"sourceRoot":""}