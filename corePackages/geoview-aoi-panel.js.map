{"version":3,"file":"corePackages/geoview-aoi-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-aoi-panel/src/aoi-panel.tsx","webpack://geoview-core/../geoview-aoi-panel/src/area-of-interest-style.ts","webpack://geoview-core/../geoview-aoi-panel/src/index.tsx","webpack://geoview-core/./src/api/plugin/appbar-plugin.ts"],"sourcesContent":["// import { TypeBasemapProps } from 'geoview-core/src/geo/layer/basemap/basemap-types';\n// import { useMapProjection } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\n// import { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { Extent } from 'geoview-core/src/api/config/types/map-schema-types';\n// import { logger } from 'geoview-core/src/core/utils/logger';\n// import { getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\nimport { getSxClasses } from './area-of-interest-style';\n\ninterface AoiPanelProps {\n  config: TypeAoiProps;\n}\n\ninterface AoiItem {\n  aoiTitle: string;\n  imageUrl: string;\n  extent: Extent;\n}\n\ntype AoiListItems = AoiItem[];\n\ntype TypeAoiProps = {\n  isOpen: boolean;\n  aoiList: AoiListItems;\n  version: string;\n};\n\nexport function AoiPanel(props: AoiPanelProps): JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { config } = props;\n  const aoiList = config.aoiList as AoiListItems;\n\n  const { cgpv } = window;\n  // const myMap = cgpv.api.maps[mapId];\n\n  const { /* api, */ ui /* , react */ } = cgpv;\n  const { Card, Box } = ui.elements;\n\n  // const { useState } = react;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state and store values\n  // const language = useAppDisplayLanguage();\n\n  // #region PRIVATE UTILITY FUNCTIONS\n  // #endregion\n  return (\n    <Box sx={sxClasses.basemapCard}>\n      {aoiList.map((aoiItem: AoiItem, index) => {\n        return (\n          <Card\n            tabIndex={0}\n            // onClick={() => setBasemap(basemap.basemapId as string)}\n            // onKeyPress={() => setBasemap(basemap.basemapId as string)}\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            title={aoiItem.aoiTitle}\n            contentCard={\n              // eslint-disable-next-line react/jsx-no-useless-fragment\n              <>\n                {typeof aoiItem.imageUrl === 'string' && (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <Box component=\"img\" key={index} src={aoiItem.imageUrl} alt=\"\" className=\"aoiCardThumbnail\" />\n                )}\n              </>\n            }\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","/* @ts-expect-error there is no mui style in this package */\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme): any => ({\n  aoiCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '2px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      width: '300px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n      '&:hover': {\n        border: `2px solid #FFFF00`,\n      },\n      '&.active': {\n        border: `2px solid #FFFFFF`,\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.geoViewColor.grey.dark[900]} !important`,\n      color: theme.palette.geoViewColor.grey.light[900],\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .aoiCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .aoiCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.85),\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.palette.geoViewColor.primary.main,\n      '& .MuiCardContent-root': {\n        '& .aoiCardThumbnailOverlay': {\n          backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.55),\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.palette.geoViewColor.primary.light[200],\n      '& .MuiCardContent-root': {\n        '& .aoiCardThumbnailOverlay': {\n          backgroundColor: 'transparent',\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .aoiCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { TypeJsonObject, toJsonObject, AnySchemaObject, Cast } from 'geoview-core/src/core/types/global-types';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { AoiIcon } from 'geoview-core/src/ui/icons';\nimport { TypeIconButtonProps } from 'geoview-core/src/ui/icon-button/icon-button-types';\nimport { TypePanelProps } from 'geoview-core/src/ui/panel/panel-types';\nimport { AoiPanel } from './aoi-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-aoi-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass AoiPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      AoiPanel: {\n        title: 'Area of Interest',\n      },\n    },\n    fr: {\n      AoiPanel: {\n        title: \"Région d'intérêt\",\n      },\n    },\n  });\n\n  override onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: `aoi-panel`,\n      tooltip: 'AoiPanel.title',\n      tooltipPlacement: 'right',\n      children: <AoiIcon />,\n      visible: true,\n    };\n  }\n\n  override onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'AoiPanel.title',\n      icon: <AoiIcon />,\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  override onCreateContent = (): JSX.Element => {\n    return <AoiPanel config={this.configObj || {}} />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  override onRemoved(): void {}\n}\n\nexport default AoiPanelPlugin;\n\n// Keep a reference to the AOI Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['aoi-panel'] = Cast<AoiPanelPlugin>(AoiPanelPlugin);\n","import { TypeButtonPanel, TypePanelProps } from '@/ui/panel/panel-types';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { TypeWindow } from '@/core/types/global-types';\nimport { TypeIconButtonProps } from '@/ui/icon-button/icon-button-types';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create content\n    this.panelProps.content = this.onCreateContent();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.mapViewer().appBarApi.createAppbarPanel(this.buttonProps!, this.panelProps, this.buttonProps.id) || undefined;\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.mapViewer().appBarApi.removeAppbarPanel(this.buttonPanel.buttonPanelId, this.buttonProps!.id!);\n    }\n  }\n}\n"],"names":["AoiPanel","props","aoiList","config","ui","window","cgpv","_ui$elements","elements","Card","Box","sxClasses","theme","aoiCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","width","transition","concat","geoViewColor","dark","fontSize","fontWeight","margin","padding","height","order","position","objectFit","top","left","lighten","cursor","borderColor","main","getSxClasses","useTheme","_jsx","sx","basemapCard","children","map","aoiItem","index","tabIndex","title","aoiTitle","contentCard","_Fragment","imageUrl","component","src","alt","className","AoiPanelPlugin","_AppBarPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","_defineProperty","toJsonObject","en","fr","configObj","_inherits","_createClass","key","value","schema","defaultConfig","id","tooltip","tooltipPlacement","AoiIcon","visible","_this$configObj","icon","status","this","isOpen","AppBarPlugin","geoviewPlugins","Cast","_AbstractPlugin","MapIcon","react","createElement","undefined","pluginProps","mapId","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","content","onCreateContent","buttonPanel","mapViewer","appBarApi","createAppbarPanel","api","removeAppbarPanel","buttonPanelId","AbstractPlugin"],"sourceRoot":""}