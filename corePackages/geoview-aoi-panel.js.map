{"version":3,"file":"corePackages/geoview-aoi-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-aoi-panel/src/aoi-panel.tsx","webpack://geoview-core/../geoview-aoi-panel/src/area-of-interest-style.ts","webpack://geoview-core/../geoview-aoi-panel/src/index.tsx","webpack://geoview-core/./src/api/plugin/appbar-plugin.ts"],"sourcesContent":["// import { TypeBasemapProps } from 'geoview-core/src/geo/layer/basemap/basemap-types';\n// import { TypeJsonObject } from 'geoview-core/src/core/types/global-types';\n// import { useMapProjection } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\n// import { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\n// import { TypeValidMapProjectionCodes, TypeDisplayLanguage } from 'geoview-core/src/api/config/types/map-schema-types';\n// import { logger } from 'geoview-core/src/core/utils/logger';\n// import { getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\nimport { getSxClasses } from './area-of-interest-style';\n\n/* interface AoiPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n*/\n\nexport function AoiPanel(/* props: AoiPanelProps */): JSX.Element {\n  // const { mapId, config } = props;\n\n  const { cgpv } = window;\n  // const myMap = cgpv.api.maps[mapId];\n\n  const { ui } = cgpv;\n  const { Box } = ui.elements;\n\n  // const { useState } = react;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state and store values\n  //  const [canSwichProjection] = useState(config.canSwichProjection);\n  //  const projections: number[] =\n  // (config.supportedProjections as TypeJsonArray).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  // const language = useAppDisplayLanguage();\n\n  // #region PRIVATE UTILITY FUNCTIONS\n  // #endregion\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {SelectChangeEvent} event select change element event\n   */\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  return <Box sx={sxClasses.basemapCard} />;\n}\n","/* @ts-expect-error there is no mui style in this package */\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme): any => ({\n  aoiCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '2px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      width: '300px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n      '&:hover': {\n        border: `2px solid #FFFF00`,\n      },\n      '&.active': {\n        border: `2px solid #FFFFFF`,\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.geoViewColor.grey.dark[900]} !important`,\n      color: theme.palette.geoViewColor.grey.light[900],\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .aoiCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .aoiCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.85),\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.palette.geoViewColor.primary.main,\n      '& .MuiCardContent-root': {\n        '& .aoiCardThumbnailOverlay': {\n          backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.55),\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.palette.geoViewColor.primary.light[200],\n      '& .MuiCardContent-root': {\n        '& .aoiCardThumbnailOverlay': {\n          backgroundColor: 'transparent',\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .aoiCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { TypeJsonObject, toJsonObject, AnySchemaObject, Cast } from 'geoview-core/src/core/types/global-types';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { AoiIcon } from 'geoview-core/src/ui/icons';\nimport { TypeIconButtonProps } from 'geoview-core/src/ui/icon-button/icon-button-types';\nimport { TypePanelProps } from 'geoview-core/src/ui/panel/panel-types';\nimport { AoiPanel } from './aoi-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-area-of-interest.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass AoiPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      AoiPanel: {\n        title: 'Area of Interest',\n        info: {\n          transport: {\n            name: 'Transport',\n            description: `The Canada Base Map - Transportation (CBMT). This web mapping service provides spatial reference context with an emphasis on transportation networks.\n                          It is designed especially for use as a background map in a web mapping application or geographic information system (GIS).`,\n          },\n          simple: {\n            name: 'Simple',\n          },\n          shaded: {\n            name: 'Shaded relief',\n            description: `The Canada Base Map - Elevation (CBME) web mapping services of the Earth Sciences Sector at Natural Resources Canada,\n                          is intended primarily for online mapping application users and developers`,\n          },\n          osm: {\n            name: 'Open Street Maps',\n          },\n          nogeom: {\n            name: 'No geometry',\n          },\n          label: {\n            name: 'with labels',\n          },\n        },\n      },\n    },\n    fr: {\n      AoiPanel: {\n        title: \"Région d'intéret\",\n        info: {\n          transport: {\n            name: 'Transport',\n            description: `Carte de base du Canada - Transport (CBCT). Ce service de cartographie Web offre un contexte de référence spatiale axé sur les réseaux de transport.\n                          Il est particulièrement conçu pour être utilisé comme fond de carte dans une application cartographique Web ou un système d'information géographique (SIG).`,\n          },\n          simple: {\n            name: 'Simple',\n          },\n          shaded: {\n            name: 'Relief ombré',\n            description: `Les services de cartographie Web de la carte de base du Canada - élévation (CBCE) du Secteur des sciences de la\n                          Terre de Ressources naturelles Canada sont destinés principalement aux utilisateurs et aux développeurs d'applications de cartographie en ligne.`,\n          },\n          osm: {\n            name: 'Carte - Open Street Maps',\n          },\n          nogeom: {\n            name: 'Pas de géométrie',\n          },\n          label: {\n            name: 'avec étiquettes',\n          },\n        },\n      },\n    },\n  });\n\n  override onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: `${this.pluginProps.mapId}-AoiPanelButton`,\n      tooltip: 'AoiPanel.title',\n      tooltipPlacement: 'right',\n      children: <AoiIcon />,\n      visible: true,\n    };\n  }\n\n  override onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'AoiPanel.title',\n      icon: <AoiIcon />,\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  override onCreateContent = (): JSX.Element => {\n    return <AoiPanel /* mapId={this.pluginProps.mapId} config={this.configObj || {}} */ />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  override onRemoved(): void {\n    // reset AOI array\n    this.mapViewer().basemap.basemaps = [];\n  }\n}\n\nexport default AoiPanelPlugin;\n\n// Keep a reference to the AOI Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['aoi-panel'] = Cast<AoiPanelPlugin>(AoiPanelPlugin);\n","import { TypeButtonPanel, TypePanelProps } from '@/ui/panel/panel-types';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { TypeWindow } from '@/core/types/global-types';\nimport { TypeIconButtonProps } from '@/ui/icon-button/icon-button-types';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create content\n    this.panelProps.content = this.onCreateContent();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.mapViewer().appBarApi.createAppbarPanel(this.buttonProps!, this.panelProps, null) || undefined;\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.mapViewer().appBarApi.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n"],"names":["AoiPanel","ui","window","cgpv","Box","elements","sxClasses","theme","aoiCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","width","transition","concat","geoViewColor","dark","fontSize","fontWeight","margin","padding","height","order","position","objectFit","top","left","lighten","cursor","borderColor","main","getSxClasses","useTheme","_jsx","sx","basemapCard","AoiPanelPlugin","_AppBarPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","_defineProperty","toJsonObject","en","title","info","transport","name","description","simple","shaded","osm","nogeom","label","fr","_inherits","_createClass","key","value","schema","defaultConfig","id","this","pluginProps","mapId","tooltip","tooltipPlacement","children","AoiIcon","visible","_this$configObj","icon","status","configObj","isOpen","mapViewer","basemap","basemaps","AppBarPlugin","geoviewPlugins","Cast","_AbstractPlugin","MapIcon","react","createElement","undefined","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","content","onCreateContent","buttonPanel","appBarApi","createAppbarPanel","api","removeAppbarPanel","buttonPanelId","AbstractPlugin"],"sourceRoot":""}